import valueAssociate from "../models/index.js"; // importa todos os models
import bcrypt from "bcrypt";
import nodemailer from "nodemailer";
import jwt from "jsonwebtoken";

const { User } = valueAssociate;

export const criarUsuario = async (req, res) => {
  try {
    const { email, senha } = req.body;

    // Valida√ß√µes b√°sicas
    if (!email) throw new Error("O email √© obrigat√≥rio.");
    if (!senha) throw new Error("A senha √© obrigat√≥ria.");

    // Verifica se o usu√°rio j√° existe
    const usuarioExistente = await User.findOne({ where: { email } });
    if (usuarioExistente) throw new Error("Usu√°rio j√° cadastrado.");

    const senhaHash = await bcrypt.hash(senha, 10);
    console.log(senhaHash)

    // Cria o usu√°rio
    const novoUsuario = await User.create({ email, senha: senhaHash });

    // Retorna o usu√°rio criado
    return res.status(201).json({ message: "Usu√°rio cadastrado!" });
  } catch (error) {
    // Retorna erro
    return res.status(400).json({ error: error.message });
  }
};



export const loginUsuario = async (req, res) => {
  try {
    const { email, senha } = req.body;

    // üîé valida√ß√µes iniciais
    if (!email) throw new Error("O email √© obrigat√≥rio.");
    if (!senha) throw new Error("A senha √© obrigat√≥ria.");

    // üîé verifica se o usu√°rio existe
    const usuario = await User.findOne({ where: { email } });
    if (!usuario) throw new Error("Usu√°rio n√£o encontrado.");

    // üîé compara a senha
    const comparaSenha = await bcrypt.compare(senha, usuario.senha);
    if (!comparaSenha) throw new Error("Senha incorreta.");

    // ‚úÖ sucesso -> retorna s√≥ o email (ou mais dados se quiser)
    return res.status(200).json({
      message: "Login realizado com sucesso!",
      email: usuario.email,
    });

  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};

import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Caminho absoluto at√© o PDF
const pdfPath = path.resolve(__dirname, "../../public/assets/manifesto.pdf");

//Codigo enviado pro email pos login
export const gerarCodigo = async (req, res) => {
  try {
    const { email } = req.body;

    // 1Ô∏è‚É£ valida email
    if (!email) throw new Error("O email √© obrigat√≥rio.");

    // 2Ô∏è‚É£ busca usu√°rio
    const usuario = await User.findOne({ where: { email } });
    if (!usuario) throw new Error("Usu√°rio n√£o encontrado.");

    // 3Ô∏è‚É£ gera c√≥digo aleat√≥rio (6 d√≠gitos)
    const codigo = Math.floor(100000 + Math.random() * 900000);
    const expiration = new Date(Date.now() + 10 * 60 * 1000); // 10 minutos


    // 5Ô∏è‚É£ atualiza usu√°rio com c√≥digo e data
    await User.update(
      { codigo: codigo, codigoExpiracao: expiration },
      { where: { email } }
    );

    // 6Ô∏è‚É£ envia email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Avalia√ß√£o faculdade",
      html: `<p>Ol√°, Aluno! <br>
              Chegamos ao fim de mais um semestre. E com isso gostariamos de 
              saber a sua opini√£o para planejarmos o pr√≥ximo semestre com base 
              na sua experi√™ncia. Preencha a avalia√ß√£o r√°pida em apenas 2 minutos! <br> <br>

              Acesse este PDF para baixar a sua avalia√ß√£o e dar inicio a sua 
              avalia√ß√£o institucional! <br> <br>

              Ao realizar a avalia√ß√£o, voc√™ ganhar√° um desconto de 40% na sua 
              pr√≥xima mensalidade! <br>
              Atenciosamente,¬†Faculdade¬†CDL.   

            </p>`,
      attachments: [
        {
          filename: "avaliacao.pdf",
          path: pdfPath,       // ‚Üê aqui!
          contentType: "application/pdf"
        }
      ]
    });
    

    return res.status(200).json({ message: "C√≥digo enviado com sucesso!" });

  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};

//Verifica o c√≥digo para efetuar o login.
export const verificarCodigo = async (req, res) => {
  try {
    const { email, codigo } = req.body;

    // 1Ô∏è‚É£ valida√ß√µes iniciais
    if (!email) throw new Error("O email √© obrigat√≥rio.");
    if (!codigo) throw new Error("O c√≥digo √© obrigat√≥rio.");

    // 2Ô∏è‚É£ busca o usu√°rio pelo email
    const usuario = await User.findOne({ where: { email } });
    if (!usuario) throw new Error("Usu√°rio n√£o encontrado.");

    // 3Ô∏è‚É£ verifica se o c√≥digo e a data existem
    if (!usuario.codigo || !usuario.codigoExpiracao) {
      throw new Error("C√≥digo n√£o gerado ou expirado.");
    }

    // 4Ô∏è‚É£ verifica se o c√≥digo expirou
    const agora = new Date();
    const dataAntiga = new Date(usuario.codigoExpiracao);

    if (agora > dataAntiga) {
      throw new Error("C√≥digo expirado.");
    }

    // 5Ô∏è‚É£ verifica se o c√≥digo bate
    if (parseInt(codigo) !== usuario.codigo) {
      throw new Error("C√≥digo incorreto.");
    }

    // 6Ô∏è‚É£ gera o payload e o token JWT
    const payload = {
      id: usuario.id,
      nome: usuario.nome,
      email: usuario.email,
    };

    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "1h" });

    // 7Ô∏è‚É£ retorna sucesso com token e payload
    return res.status(200).json({
      message: "C√≥digo verificado com sucesso!",
      token,
      usuario: payload,
    });

  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};
